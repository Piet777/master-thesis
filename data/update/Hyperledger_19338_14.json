
    {
        "Jira":"Hyperledger",
        "IssueId":19338,
        "EvoId":14,
        "Summary":"Peer overwrites limit\/skip fields in CouchDB query string",
        "Description":"If I pass in a CouchDB query string that specifies either `limit` or `skip`, then the query results are not as I would expect. It seems that the peer has some code in it that forcibly sets `limit` to a configuration value from `core.yaml`, and forcibly sets `skip` to 0. It does this without checking whether `limit` or `skip` are already specified by the user in the query string. This is the query string that we send in:\r\n{code:java}\r\n{\"selector\":{\"$class\":\"systest.queries.SampleAsset\",\"$registryType\":\"Asset\",\"$registryId\":\"systest.queries.SampleAsset\"},\"limit\":2}{code}\r\nThis is the output of the peer rewriting the query:\r\n{code:java}\r\n[statecouchdb] ApplyQueryWrapper -> DEBU 1f62 Rewritten query with data wrapper: {\"limit\":10000,\"selector\":{\"$and\":[\\{\"chaincodeid\":\"systest-queries\"},\\{\"data.$class\":\"systest.queries.SampleAsset\",\"data.$registryId\":\"systest.queries.SampleAsset\",\"data.$registryType\":\"Asset\"}]},\"skip\":0}{code}\r\nThis is the offending code:\r\n\r\n[https:\/\/github.com\/hyperledger\/fabric\/blob\/d9c320297bd2a4eff2eb253ce84dc431ef860972\/core\/ledger\/kvledger\/txmgmt\/statedb\/statecouchdb\/query_wrapper.go#L101]\r\n\r\nIMHO the code should check for existing `limit` or `skip` values before overwriting them\u00a0;)",
        "VersionsAffected":"v1.0.0",
        "IssueType":"Improvement",
        "Project":"Fabric",
        "Components":"fabric-ledger",
        "CreatedDate":"2017-07-18 21:10:33",
        "ResolvedDate":"2018-03-11 14:13:58",
        "Status":"To Do",
        "Priority":"Highest",
        "Creator":"Simon Stone",
        "Reporter":"Simon Stone",
        "Resolution":null,
        "IssueLinks":"This issue duplicates FAB-2809",
        "Labels":"Ledger",
        "VersionsFixed":null,
        "Assignee":null,
        "TimeSpent":null,
        "Comments":[
            {
                "Author":"chen xuan",
                "Created":"2017-07-19 08:13:44",
                "Comment":"i meet the same question."
            },
            {
                "Author":"Sadok SADDEM",
                "Created":"2017-07-19 14:00:12",
                "Comment":"I suggest to replace in [core\/ledger\/kvledger\/txmgmt\/statedb\/statecouchdb\/query_wrapper.go|https:\/\/github.com\/hyperledger\/fabric\/blob\/master\/core\/ledger\/kvledger\/txmgmt\/statedb\/statecouchdb\/query_wrapper.go#L101]\r\n\r\n\/\/Add limit\r\n jsonQueryMap[jsonQueryLimit] = queryLimit\r\n\r\n\/\/Add skip\r\n jsonQueryMap[jsonQuerySkip] = querySkip\r\n\r\n\u00a0\r\n\r\nwith\u00a0\r\n\r\n\u00a0\r\n\r\nif _, ok := jsonQueryMap[jsonQueryLimit]; !ok \\{\r\n jsonQueryMap[jsonQueryLimit] = queryLimit\r\n }\r\n if _, ok := jsonQueryMap[jsonQueryLimit]; !ok \\{\r\n jsonQueryMap[jsonQuerySkip] = querySkip\r\n }\r\n\r\nand in method signature wil be:\r\n func ApplyQueryWrapper(namespace, queryString string, *defaultLimit int*) (string, error)\r\n\r\n\u00a0\r\n\r\nP.S : Must verify that\u00a0jsonQueryMap[jsonQueryLimit]\u00a0and\u00a0 jsonQueryMap[jsonQueryLimit] contains int\r\n Regards\r\n\r\n\u00a0"
            },
            {
                "Author":"David Enyeart",
                "Created":"2017-07-19 15:03:54",
                "Comment":"We did intend to revisit how 'paging' works, balancing function, performance, and mitigation of malicious user requests. FAB-2809 is part of that. We'll also consider FAB-5369 during the assessment."
            },
            {
                "Author":"Dave Kelsey",
                "Created":"2017-08-03 13:47:50",
                "Comment":"We are getting lots of people asking about this issue and when it will be fixed so I have changed it to highest."
            },
            {
                "Author":"Gari Singh",
                "Created":"2017-09-04 13:00:27",
                "Comment":"[~denyeart] I'm changing this to improvement as this is working as designed I believe?"
            },
            {
                "Author":"David Enyeart",
                "Created":"2017-09-05 11:59:03",
                "Comment":"[~mastersingh24] I agree this is an improvement rather than bug. I have added more description to FAB-2809 where CouchDB pagination support will be added, to include more context of the limitation and proposed solution.In fact, I will mark this item as a duplicate of FAB-2809. I'd encourage all the watchers of this item to review FAB-2809 description and provide their comments there. [~sstone1] [~davidkel] [~chenxuan]."
            },
            {
                "Author":"Simon Stone",
                "Created":"2017-10-03 19:16:31",
                "Comment":"Just to back up what Dave said - this is a real pain for Composer users. It comes up without fail at least once a week, if not more. Composer users want to be able to build apps that page through large result sets (perhaps lists of assets matching a given query), and they can't do that at the moment. Their only option is to mirror the Blockchain data into an external database and build an app which queries that instead. Will leave the same comment in FAB-2809."
            },
            {
                "Author":"David Enyeart",
                "Created":"2018-03-11 14:13:53",
                "Comment":"Closing this one - will track under FAB-2809 as High Priority."
            }
        ]
    }

